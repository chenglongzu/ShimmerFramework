
--table表示方法

--类
Class={
	name = 'ulognn',
	age = 20,

	ClassFunction=function ( ... )
		-- body
		arg={...}

		for i=1,#arg do
			print(arg[i])
		end
		print()
	end
}
--增删改查
--增
Class.gender="man"
--删
Class.name=nil
--改
Class.name="祖成龙"
--查
print(Class.name)

print("_____________调用类中的方法_____________")
print("正常调用")
--正常调用
Class.ClassFunction()
print("冒号调用")
--默认传递当前lua脚本调用,会输出当前脚本的tostring方法
--传递的参数就是self，在lua中表示自己本身的就是self
Class:ClassFunction()
print("_____________类中的方法调用结束——————————————")
--数组
Arry={"No.1","No.2","No.3" }

--增删改查
--增
Arry[4]="No.4"
--删
Arry[1]=nil
--改
Arry[2]="No.3"
--查
print(Arry[3])

--迭代器遍历格式for i,k in pairs(表) do end
print("_____________for循环遍历数组值____________________")
for i=1,#Arry do
	print(Arry[i])
end
print("_____________for循环遍历结束了____________________")


print("_____________ipairs遍历数组值_____________________")
for i,v in ipairs(Arry) do
	print(i..v)
end
print("_____________ipairs遍历结束了___________________")

--字典
Dictionary={
	["Name1"]="ZCl",
	["Name2"]="ULOGNN",
	["Name3"]="LONGCHENG"
}
--使用表来模拟出字典的效果，不过使用#或table.getn时会自动忽略小于0的索引
--长度受索引最大值影响
--所以当表用作字典时不建议直接获取table的长度

--增删改查
--增
Dictionary["Name4"]="WEIGUANG"
--删
Dictionary["Name1"]=nil
--改
Dictionary["Name2"]="ZULONG"
--查
print(Dictionary["Name4"])

--pairs迭代器遍历
print("________pairs迭代器遍历键值__________")
for i,v in pairs(Dictionary) do
	print(i..v)
end
print("_________pairs迭代器遍历键值结束啦_________")

--有序字典
OrederedDictionary={
	[1]="1",
	[2]="2",
	[3]="3"
}

print("__________ipairs遍历有序table________")
for i,v in ipairs(OrederedDictionary) do
	print(i,v)
end
print("__________ipairs遍历有序数组结束啦_________")
--ipairs

--pairs
--table获取数据的长度
print(#Arry)
print(table.getn(Arry))
--两种获取长度的方法 都只适用于table当作数组的情况下


--两种函数的声明方式

--第一种
ChangeGunOne=function(date1,date2)
	num1=date1
	num2=date2

	print(num1)
	print(num2)

--lua中函数可存在多个返回值
	return num1,num2
	--return num2
	
end

--调用函数时有多个返回值时可声明多个返回值进行接收
returnValue1,returnValue2= ChangeGunOne(111,222)

--第二种
function ChangeGunTwo( ... )
	-- body
	--用是在调用时不确定有几个参数的情况
	--先用table数组将参数存储起来然后可继续调用
	arg={...}

	--闭包是指在函数中声明函数，并可作为返回值返回出来，用一个参数来接受
	--函数采用匿名函数的方法在外部声明函数类型的变量来接受
	return function ( ... )
		-- body
		print("闭包函数")
	end
end

--使用函数类型的变量来接收
returnFunction=ChangeGunTwo()

--执行这个函数
returnFunction()


--表之间的公共操作
--插入 两个参数 将第一个参数的表插入到第二个参数的表中
table.insert(Dictionary,OrederedDictionary)
--移除表中的内容 传递的第一个参数是需要移除的表，第二个内容时移除的表中的索引
table.remove(OrederedDictionary,1)
--排序 传递一个表为参数 lua自动为表进行排序，默认为降序
table.sort(OrederedDictionary)
--拼接 拼接表中的所有元素 传递两个参数，第一个参数时table表，第二个参数是用来链接的参数
table.concat(OrederedDictionary,"和")

--多脚本执行
--require("脚本名称")  脚本的加载
--脚本的卸载
--package.loaded["脚本名称"]=nail
--当返回值为nail时表示脚本并没有被加载
--isLoaded = package.loaded["脚本名称"]

--_G本质上也是一个table，和我们自己声明的一样
--所有变量除了带了local的变量和函数都存储在_G中


--逻辑与和逻辑或以及模仿三目运算符
x=1
y=0
local res = (x>y) and x or y

--协同程序 
--协同程序的两种调用方法
--1，直接将函数当作参数传递给协程 然后将返回值传递开启协程
coroutineFunction=coroutine.create( function ( ... )
	-- body
	print("第一个协同程序执行啦")
end)

print(type(coroutineFunction))
coroutine.resume(coroutineFunction) --开启协程

--2，创建协程后返回函数直接运行程序
coroutine.wrap(function ( ... )
	-- body
	print("第二个协程函数执行啦")
end)

--元表的概念
table1={
	name="table1"
}
table2={
	name="table2"
}
--将第一个表设置为第二个表的子表，第二个表为第一个表的元表
setmetatable(table1,table2)
--获取自己的元表，参数为子表。
print(getmetatable(table1))

--表的特定操作
--_call
--当子表为方法时会默认调用这个方法
--_tostring
--当子表要当作字符串使用时会默认调用这个方法
--_index _newindex
--_index在子表中使用，将父级的表赋值给_index,在外部使用子表时找不到某一个属性则会到指定的父级表中寻找
--_newindex也是在子表中使用，一般将父级表赋值给_newindex,在外部添加或是赋值给一个不存在的索引
--则会在_newindex中添加索引
--运算符重载 +-*/ _add _sub _mul _div
baseTable={
	name="父级表",
	_tostring=function ( ... )
		-- body
		--相当于C#中的tostring方法
		return name
	end,

	_call=function (a , b)
		-- body
		print(a)
		print(b)
		--外部调用这个表为函数时则自动调用这个函数
	end,


--加减乘除方法 可对子表中的某个字段属性进行加减乘除
	_add=function ( ... )
		-- body
	end,

	_sub=function ( ... )
		-- body
	end,

	_mul=function ( ... )
		-- body
	end,

	_div=function ( ... )
		-- body
	end,

	num=10,
	
}
--_index要在外部声明，将父级的__index赋值给自己baseTable
baseTable.__index=baseTable

songtable1={
	
}

songtable2={

}

setmetatable(songtable1,baseTable)
setmetatable(songtable2,baseTable)

print(songtable2.name)
